#!/bin/bash

### Seed Dotfiles Managment ###

################################################

################################################
# Vars
SDM_WORK_DIR=$(dirname $0)

################################################
# Functions
# Checkl if a function exist
f_exist() {
    local function_name="$1"
    type -t "$function_name" >/dev/null
}

################################################

# allowed commands, functions and  doc
command_list=(
    "help:help_msg:Show this help message"
    "setups:run_setup:Run a setup scripts"
    "install:run_install:Run the installation rutine"
)

################################################
##
# check if alerts is used
# temporal error
a_error() {
    echo "! ERROR: $1"
}

imports=(
    "a_title:$SDM_WORK_DIR/../utils/alert.sh"
    "verify_commands:$SDM_WORK_DIR/../utils/test.sh"
    "parse_toml_line:$SDM_WORK_DIR/../utils/shell_config.sh"
)
for imprt in ${imports[@]}; do
    IFS=":" read -r check_cmd import_file <<<"$imprt"
    if ! f_exist "$check_cmd"; then
        import_file=$(realpath "$import_file")
        if [ -f "$import_file" ]; then
            source "$import_file"
        else
            a_error "Error, no util '$import_file' found"
            exit 1
        fi
    fi
done
# if ! f_exist "a_title"; then
#     source
# fi
# # check if test exist
# if ! f_exist "verify_commands"; then
#     if ! >/dev/null; then
#         a_error "No test util file"
#         exit 1
#     fi
# fi
# # check if shell configs exist
# if ! f_exist "parse_toml_line"; then
#     source || a_error "No shell_config util file" && exit 1
# fi

################################################

a_dialog "SDM" "··"

################################################
# Function to print help message
help_msg() {
    a_action "Available commands:"
    for command in "${command_list[@]}"; do
        IFS=":" read -r cmd_name cmd_func cmd_desc <<<"$command"
        a_info "\t${BOLD}$cmd_name${RESET} - ${ITALIC}$cmd_desc${RESET}"
    done
}

# Installation rutin
run_install() {
    util_user_scripts
    # util_generate_shell_configs

}

# Util generate shell config files
util_generate_shell_configs() {
    "$SDM_WORK_DIR/../utils/shell_config.sh"
}

# Util to link scripts
util_user_scripts() {
    a_action "Link user scripts" # Link scripts

    local search_path="$HOME/.local/bin"
    a_action "Check $search_path in \$PATH" # PATH

    local found_sp=false
    local toml_file="$SDM_WORK_DIR/../shells/config.toml"
    # Check dir existence
    if [ ! -d "$search_path" ]; then
        a_warning "Directory '$search_path' not found"
        mkdir "$search_path"
        a_info "Created"
    fi
    # Seach in PATH
    IFS=":" read -r path_list <<<"$PATH"
    for single_path in "${path_list[@]}"; do
        if [ "$single_path" == "$search_path" ]; then
            found_sp=true
            a_success "$search_path found"
            break
        fi
    done
    # cehck toml file
    if [ ! -f "$toml_file" ]; then
        a_warning "Toml config file not found"
        a_info "Generating config file"
        generate_toml_file
    fi
    # try add le seached path to the config file
    if ! $found_sp; then
        # modificate TOML file
        new_path "$search_path"
        a_info "$search_path added to shell config file"
    fi




    a_decrease # PATH

    # Bild sources
    a_action "Generate shell source settings" # Generate
    generate_shells_files
    a_decrease # Generate

    a_decrease # link scripts

    #     local search_path="~/.local/bin"
    #     local found=false
    #     IFS=":" read -r path_list <<<"$PATH"
    #     for single_path in "${path_list[@]}"; do
    #         if [ "$single_path" == "$search_path" ]; then
    #             found=true
    #             a_success "Path found"
    #             break
    #         fi
    #     done
    #     # Check dir existence
    #     if [ ! -d "$search_path" ]; then
    #         a_warning "Directory '$search_path' not exit"
    #         mkdir $search_path
    #         a_info "Created"
    #     fi
    #     if ! $found; then
    #         a_warning "Path not found in \$PATH"
    #         # try add the path to the config.toml
    #         local content = ""
    #         if ! grep -qF "$CONTENT" "$config_file" 2>/dev/null; then

    #         fi
    #     fi
    #     echo $PATH

    #     a_decrease ## PATH

}

################################################
runner() {
    local command="$1"
    local found=false

    for cmd in "${command_list[@]}"; do
        IFS=':' read -r cmd_name cmd_function _ <<<"$cmd"
        if [ "$cmd_name" == "install" ]; then
            "$cmd_function"
            found=true
            break
        fi
    done

    if ! $found; then
        a_error "Invalid '$1' command. "
        help_msg
        exit 1
    fi
}
################################################

if [ -z "$1" ]; then
    help_msg
    exit
fi

runner "$1"
